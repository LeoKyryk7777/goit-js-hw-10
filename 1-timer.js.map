{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dataInput = document.getElementById('datetime-picker');\nconst dataButton = document.querySelector('[data-start]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst daysEl = document.querySelector('[data-days]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEL = document.querySelector('[data-seconds]');\nlet userSelectedDate = null;\nlet timerId = null;\n\ndataButton.addEventListener('click', startTimer);\n\nflatpickr(dataInput, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n        color: 'red',\n        titleColor: 'white',\n        messageColor: 'white',\n        backgroundColor: 'red',\n        close: false,\n      });\n    } else {\n      userSelectedDate = selectedDates[0];\n      dataButton.removeAttribute('disabled');\n    }\n  },\n});\n\nfunction startTimer() {\n  timerId = setInterval(updateTimer, 1000);\n  dataButton.setAttribute('disabled', true);\n  dataInput.setAttribute('disabled', true);\n}\nfunction updateTimer() {\n  const diff = userSelectedDate - new Date();\n  const { days, hours, minutes, seconds } = convertMs(diff);\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEL.textContent = addLeadingZero(seconds);\n  if (diff <= 1000) {\n    clearInterval(timerId);\n    dataInput.removeAttribute('disabled');\n  }\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["dataInput","dataButton","hoursEl","daysEl","minutesEl","secondsEL","userSelectedDate","timerId","startTimer","flatpickr","selectedDates","iziToast","updateTimer","diff","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"0IAMA,MAAMA,EAAY,SAAS,eAAe,iBAAiB,EACrDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EACzD,IAAIC,EAAmB,KACnBC,EAAU,KAEdN,EAAW,iBAAiB,QAASO,CAAU,EAE/CC,EAAUT,EAAW,CACnB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQU,EAAe,CACjBA,EAAc,CAAC,GAAK,IAAI,KAC1BC,EAAS,MAAM,CACb,MAAO,QACP,SAAU,WACV,QAAS,qCACT,MAAO,MACP,WAAY,QACZ,aAAc,QACd,gBAAiB,MACjB,MAAO,EACf,CAAO,GAEDL,EAAmBI,EAAc,CAAC,EAClCT,EAAW,gBAAgB,UAAU,EAExC,CACH,CAAC,EAED,SAASO,GAAa,CACpBD,EAAU,YAAYK,EAAa,GAAI,EACvCX,EAAW,aAAa,WAAY,EAAI,EACxCD,EAAU,aAAa,WAAY,EAAI,CACzC,CACA,SAASY,GAAc,CACrB,MAAMC,EAAOP,EAAmB,IAAI,KAC9B,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxDV,EAAO,YAAcgB,EAAeL,CAAI,EACxCZ,EAAQ,YAAciB,EAAeJ,CAAK,EAC1CX,EAAU,YAAce,EAAeH,CAAO,EAC9CX,EAAU,YAAcc,EAAeF,CAAO,EAC1CJ,GAAQ,MACV,cAAcN,CAAO,EACrBP,EAAU,gBAAgB,UAAU,EAExC,CAEA,SAASmB,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASF,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}